import requests
import re

# https://github.com/gmatuz/inthewilddb

def is_valid_cve_id(cve_id):
  """
  Checks if the provided string is a valid CVE ID format (e.g., CVE-2024-1234).

  Args:
      cve_id (str): The CVE ID to validate.

  Returns:
      bool: True if the format is valid, False otherwise.
  """

  pattern = r"^CVE-\d{4}-\d{4,5}$"  # Regex pattern for CVE ID format
  return bool(re.match(pattern, cve_id))

def fetch_exploited_data():
  """
  Fetches data about exploited vulnerabilities from the inTheWild API.

  Returns:
      list: A list of dictionaries containing vulnerability information,
          or None if there's an API error.
  """

  url = "https://inthewild.io/api/exploited"
  headers = {"Accept": "application/json"}

  try:
    response = requests.get(url, headers=headers)
    response.raise_for_status()  # Raise an exception for non-200 status codes
    return response.json()
  except requests.exceptions.RequestException as e:
    print(f"Error fetching data from the API: {e}")
    return None

def search_exploited_data(data, cve_id):
  """
  Searches a list of vulnerability data for a specific CVE ID.

  Args:
      data (list): A list of dictionaries containing vulnerability information.
      cve_id (str): The CVE ID to search for.

  Returns:
      dict: The dictionary containing information for the specified CVE ID,
          or None if not found.
  """

  for entry in data:
    if entry["id"] == cve_id:
      return entry
  return None

# Handle potential script arguments
if __name__ == "__main__":
  import sys

  if len(sys.argv) > 1:
    cve_id = sys.argv[1]
    #print(f"cve is: {cve_id}")
  else:
    print("Usage: script.py <CVE_ID>")
    exit()

  # Validate CVE ID format
  if not is_valid_cve_id(cve_id):
    print(f"Invalid CVE ID format. Please provide a valid ID (e.g., cve-2024-1234).")
    exit()

  # Fetch data and handle errors
  exploited_data = fetch_exploited_data()
  if not exploited_data:
    exit()

  # Search the data and display results
  match = search_exploited_data(exploited_data, cve_id)
  if match:
    print(f"Found information for CVE ID: {match['id']}")
    print(match)
    # Print additional details if desired (e.g., earliestReport)
  else:
    print(f"No information found for CVE ID: {cve_id}")
